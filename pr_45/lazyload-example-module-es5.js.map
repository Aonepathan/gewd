{"version":3,"sources":["webpack:///src/app/examples/lazyload-example/lazyload-example.component.html","webpack:///src/app/examples/lazyload-example/lazyload-example.component.css","webpack:///src/app/examples/lazyload-example/lazyload-example.component.ts","webpack:///src/app/examples/lazyload-example/lazyload-example.module.ts"],"names":["LazyloadExampleComponent","http","outputLog","outputBinding","outputTest","e","addLogEntry","lazyLoadReadmeMD$","get","responseType","lazyComponent","component","setComponent","lazyModuleComponent","moduleAlias","push","selector","template","testModuleLazy","then","TestModule","LazyloadExampleModule","name","componentType","declarations","imports","withLazy","moduleName","moduleConfig","load","RegisterLazyComponent"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSf,QAAaA,wBAAwB;AAWnC,wCAAoBC,IAApB,EAAsC;AAAA;;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AATb,aAAAC,SAAA,GAAY,EAAZ;AACA,aAAAC,aAAA,GAAgB;AACrBC,oBAAU,EAAE,oBAACC,CAAD;AAAA,mBAAO,KAAI,CAACC,WAAL,CAAiBD,CAAjB,CAAP;AAAA;AADS,SAAhB;AAIP,aAAAE,iBAAA,GAAoB,KAAKN,IAAL,CAAUO,GAAV,CAAc,gCAAd,EAAgD;AAClEC,sBAAY,EAAE;AADoD,SAAhD,CAApB;AAIyC;;AAXN;AAAA;AAAA,eAanC,oBAAQ,CACP;AAdkC;AAAA;AAAA,eAgBnC,qBAAaC,aAAb,EAA2C;AACzCA,uBAAa,CAACC,SAAd,GAA0B,WAA1B;AACAD,uBAAa,CAACE,YAAd,GAFyC,CAGzC;AACD;AApBkC;AAAA;AAAA,eAsBnC,2BAAmBC,mBAAnB,EAA6D;AAC3DA,6BAAmB,CAACC,WAApB,GAAkC,aAAlC;AACAD,6BAAmB,CAACF,SAApB,GAAgC,cAAhC;AACAE,6BAAmB,CAACD,YAApB;AACD;AA1BkC;AAAA;AAAA,eA4BnC,qBAAaP,CAAb,EAAgB;AACd,eAAKH,SAAL,CAAea,IAAf,CAAoBV,CAApB;AACD;AA9BkC;;AAAA;AAAA,OAArC;;;;cAW4B;;;;AAXfL,4BAAwB,6DALpC,gEAAU;AACTgB,cAAQ,EAAE,uBADD;AAETC,cAAQ,EAAR;AAAA;AAAA,kIAFS;;;;AAAA,KAAV,CAKoC,E,+EAWT,+D,EAXS,GAAxBjB,wBAAwB,CAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGb,QAAMkB,cAAc,GAAG,IAAI,qDAAJ,CACrB;AAAA,aAAM;AAAA;AAAA;AAAA;AAAA,+EACHC,IADG,CACE;AAAA,YAAEC,UAAF,QAAEA,UAAF;AAAA,eAAkBA,UAAlB;AAAA,OADF,CAAN;AAAA,KADqB,CAAvB;;AAuBA,QAAaC,qBAAqB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,eAChC,yBAAa;AACX,iBAAO,CACL;AACEC,gBAAI,EAAE,iBADR;AAEEC,yBAAa,EAAE;AAFjB,WADK,CAAP;AAMD;AAR+B;;AAAA;AAAA,OAAlC;;AAAaF,yBAAqB,6DAlBjC,+DAAS;AACRG,kBAAY,EAAE,CAAC,oFAAD,CADN;AAERC,aAAO,EAAE,CACP,4DADO,EAEP,uEAAqBC,QAArB,CAA8B,CAC5B;AACEC,kBAAU,EAAE,aADd;AAEEC,oBAAY,EAAE;AACZC,cAAI,EAAEX;AADM;AAFhB,OAD4B,CAA9B,CAFO,EAUP,wEAVO,EAWP,mFAXO,EAYP,oEAZO,EAaP,qEAbO;AAFD,KAAT,CAkBiC,GAArBG,qBAAqB,CAArB;;AAWb,8EAAsBS,qBAAtB,CAA4C,WAA5C,EACE,IAAI,qDAAJ,CAAc;AAAA,aAAM;AAAA;AAAA;AAAA;AAAA,uEAAN;AAAA,KAAd,CADF","file":"lazyload-example-module-es5.js","sourcesContent":["export default \"<mat-tab-group>\\n  <mat-tab label=\\\"README.MD\\\" #readmeTab>\\n    <gewd-markdown *ngIf=\\\"readmeTab.isActive\\\"\\n                   [markdown]=\\\"lazyLoadReadmeMD$ | async\\\"></gewd-markdown>\\n  </mat-tab>\\n  <mat-tab label=\\\"Try out\\\">\\n\\n<h2><code>gewd-lazy-component</code></h2>\\n\\n<gewd-lazy-component #lazyComponent\\n                     [componentInputs]=\\\"{ testProp: 'Component Binding from outside' }\\\">\\n  <button mat-raised-button color=\\\"primary\\\"\\n          (click)=\\\"setLazyComp(lazyComponent)\\\">\\n    Load Lazy Component: Test-Comp <br/> (this button as content will be replaced)\\n  </button>\\n\\n  <mat-progress-bar isLoading mode=\\\"indeterminate\\\" color=\\\"accent\\\"></mat-progress-bar>\\n</gewd-lazy-component>\\n\\n<br/>\\n<br/>\\n\\n<h2><code>gewd-lazy-module-component</code></h2>\\n\\n<gewd-lazy-module-component\\n  #lazyModuleComponent\\n  [componentInputs]=\\\"{ testProp: 'Module Component Example' }\\\"\\n  [componentOutputs]=\\\"outputBinding\\\">\\n  <button mat-raised-button color=\\\"primary\\\"\\n          (click)=\\\"setLazyModuleComp(lazyModuleComponent)\\\">\\n    Load Lazy Module-Component: Test Module-Comp <br/> (this button as content will be replaced)\\n  </button>\\n\\n\\n  <mat-progress-bar isLoading mode=\\\"indeterminate\\\" color=\\\"accent\\\"></mat-progress-bar>\\n</gewd-lazy-module-component>\\n\\n<br/>\\n<br/>\\n\\n<div>\\n  This Container outside of the lazy loaded component will list the Output-Events:\\n\\n  <pre>{{outputLog | json}}</pre>\\n</div>\\n\\n  </mat-tab>\\n</mat-tab-group>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHBzL2RlbW8vc3JjL2FwcC9leGFtcGxlcy9sYXp5bG9hZC1leGFtcGxlL2xhenlsb2FkLWV4YW1wbGUuY29tcG9uZW50LmNzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport {LazyComponent, LazyModuleComponent} from \"@gewd/lazy/loader\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Component({\n  selector: 'gewd-lazyload-example',\n  templateUrl: './lazyload-example.component.html',\n  styleUrls: ['./lazyload-example.component.css']\n})\nexport class LazyloadExampleComponent implements OnInit {\n\n  public outputLog = [];\n  public outputBinding = {\n    outputTest: (e) => this.addLogEntry(e)\n  };\n\n  lazyLoadReadmeMD$ = this.http.get('./assets/readme/lazy/README.md', {\n    responseType: 'text'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n  }\n\n  setLazyComp (lazyComponent: LazyComponent) {\n    lazyComponent.component = 'test-comp';\n    lazyComponent.setComponent();\n    // this.cd.markForCheck();\n  }\n\n  setLazyModuleComp (lazyModuleComponent: LazyModuleComponent) {\n    lazyModuleComponent.moduleAlias = 'test-module';\n    lazyModuleComponent.component = 'MyModuleComp';\n    lazyModuleComponent.setComponent();\n  }\n\n  addLogEntry (e) {\n    this.outputLog.push(e);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LazyloadExampleComponent } from './lazyload-example.component';\nimport {GewdLazyLoaderModule} from \"@gewd/lazy/loader\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {LazyModule, LazyModuleComponentInfo} from \"@gewd/lazy/contracts\";\nimport {Lazy} from \"@gewd/lazy/utils\";\nimport {DynamicLoaderRegistry} from \"@gewd/lazy/registry\";\nimport {MatTabsModule} from \"@angular/material/tabs\";\nimport {MarkdownModule} from \"@gewd/markdown/module\";\n\nconst testModuleLazy = new Lazy<any>(\n  () => import(/* webpackChunkName: \"lazy-test-module\" */ './lazy-wrapper/test-module-comp')\n    .then(({TestModule}) => TestModule)\n);\n\n@NgModule({\n  declarations: [LazyloadExampleComponent],\n  imports: [\n    CommonModule,\n    GewdLazyLoaderModule.withLazy([\n      {\n        moduleName: 'test-module',\n        moduleConfig: {\n          load: testModuleLazy\n        }\n      }\n    ]),\n    MatButtonModule,\n    MatProgressBarModule,\n    MatTabsModule,\n    MarkdownModule\n  ]\n})\nexport class LazyloadExampleModule  implements LazyModule {\n  getComponents(): LazyModuleComponentInfo[] {\n    return [\n      {\n        name: 'LazyLoadExample',\n        componentType: LazyloadExampleComponent\n      }\n    ];\n  }\n}\n\nDynamicLoaderRegistry.RegisterLazyComponent('test-comp',\n  new Lazy<any>(() => import('./lazy-wrapper/test-comp'))\n);\n\n"]}